import sounddevice as sd
import numpy as np
import queue
import time

class AudioListener:
    def __init__(self, samplerate=16000, blocksize=1600, audio_queue=None, level_queue=None, cmd_handler=None):
        self.sr = samplerate
        self.block = blocksize
        self.audio_q = audio_queue
        self.level_q = level_queue
        self.stream = None
        self.cmd_handler = cmd_handler

    def _callback(self, indata, frames, time_info, status):
        # `indata` - —Ü–µ —Å–∏—Ä–∏–π –±—É—Ñ–µ—Ä (raw buffer), –∞ –Ω–µ NumPy array.

        # 1. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—î–º–æ –±—É—Ñ–µ—Ä –≤ —á–µ—Ä–≥—É –¥–ª—è Vosk.
        #    –í—ñ–Ω –≤–∂–µ —î –±–∞–π—Ç–∞–º–∏, —Ç–æ–º—É .tobytes() –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.
        if self.audio_q is not None:
            self.audio_q.put(indata)

        # 2. –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≥—É—á–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ NumPy array –∑ –±—É—Ñ–µ—Ä–∞.
        if self.level_q is not None:
            try:
                # –°—Ç–≤–æ—Ä—é—î–º–æ NumPy array –∑ raw buffer, –≤–∫–∞–∑—É—é—á–∏ —Ç–∏–ø –¥–∞–Ω–∏—Ö.
                np_indata = np.frombuffer(indata, dtype=np.int16)

                # –ü–æ–¥–∞–ª—å—à—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º.
                float_data = np_indata.astype(np.float32) / 32768.0
                rms = np.sqrt(np.mean(float_data**2))
                self.level_q.put_nowait(rms)
            except queue.Full:
                pass

    def run(self):
        try:
            with sd.RawInputStream(channels=1, samplerate=self.sr, blocksize=self.block,
                                   callback=self._callback, dtype='int16'):
                print("üé§ Audio listener started correctly...")
                self.cmd_handler.handle("chill")
                while True:
                    time.sleep(1)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ AudioListener: {e}")