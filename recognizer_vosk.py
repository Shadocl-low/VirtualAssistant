from vosk import Model, KaldiRecognizer
import json
import queue
import time

class VoskRecognizer:
    def __init__(self, model_path, audio_queue: queue.Queue, text_queue: queue.Queue,
                 wake_words: list, commands: dict, sr=16000, command_timeout=15):

        print("üéß Initializing recognizer with wake-word functionality...")

        self.audio_q = audio_queue
        self.text_q = text_queue
        self.command_timeout = command_timeout  # –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
        self.wake_words = wake_words

        model = Model(model_path)

        # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –ª–µ–≥–∫–∏–π —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –¢–Ü–õ–¨–ö–ò –¥–ª—è wake-words
        # [unk] –¥–æ–∑–≤–æ–ª—è—î —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º—ñ —Å–ª–æ–≤–∞, —â–æ –ø—ñ–¥–≤–∏—â—É—î —Ç–æ—á–Ω—ñ—Å—Ç—å
        wake_word_grammar = json.dumps(wake_words + ["[unk]"])
        self.wake_word_recognizer = KaldiRecognizer(model, sr, wake_word_grammar)
        print(f"üëÇ Listening for wake words: {wake_words}")

        # 2. –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
        # –î–ª—è –∫—Ä–∞—â–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏–∫—É –∑ —É—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
        command_phrases = list(commands.keys())
        self.command_recognizer = KaldiRecognizer(model, sr, json.dumps(command_phrases + ["[unk]"]))
        print(f"üí¨ Ready to listen for {len(command_phrases)} commands after wake-word.")

        # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
        self.is_awake = False
        self.wakeup_time = 0

    def run(self):
        while True:
            audio_data = self.audio_q.get()
            if audio_data is None:
                break

            if not self.is_awake:
                # --- –†–ï–ñ–ò–ú 1: –û–ß–Ü–ö–£–í–ê–ù–ù–Ø WAKE-WORD ---
                if self.wake_word_recognizer.AcceptWaveform(bytes(audio_data)):
                    result = json.loads(self.wake_word_recognizer.Result())
                    text = result.get('text', '').strip()
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —î –æ–¥–Ω–∏–º –∑ wake-words
                    if any(word in text for word in self.wake_words):
                        print("\n‚ú® Wake-word detected! Listening for command...")
                        self.is_awake = True
                        self.wakeup_time = time.time()
            else:
                # --- –†–ï–ñ–òM 2: –ê–ö–¢–ò–í–ù–ï –°–õ–£–•–ê–ù–ù–Ø –ö–û–ú–ê–ù–î–ò ---
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–∞–π–º–∞—É—Ç
                if time.time() - self.wakeup_time > self.command_timeout:
                    print("üåô Command timeout. Going back to sleep.")
                    self.is_awake = False
                    # –°–∫–∏–¥–∞—î–º–æ –±—É—Ñ–µ—Ä —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–ª–∏—à–∫—ñ–≤ –º–æ–≤–∏
                    self.command_recognizer.Reset()
                    continue

                if self.command_recognizer.AcceptWaveform(bytes(audio_data)):
                    result = json.loads(self.command_recognizer.Result())
                    command_text = result.get('text', '').strip()

                    if command_text and command_text != "[unk]":
                        print(f"‚úÖ Command heard: '{command_text}'")
                        self.text_q.put(command_text)
                        self.is_awake = False # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É —Å–ø–ª—è—á–∏–π —Ä–µ–∂–∏–º –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
                        self.command_recognizer.Reset()