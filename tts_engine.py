import os
import threading
import tempfile
import traceback


class SimpleRVCTTSEngine:
    def __init__(self, rvc_model_path=None, rvc_index_path=None, voice_index=1, device='cpu'):
        self.voice_index = voice_index
        self.is_speaking = False
        self._current_thread = None
        self.rvc_converter = None
        self.use_rvc = False
        print("üîä –û–±—ã—á–Ω—ã–π TTS —Ä–µ–∂–∏–º")

    def speak(self, text):
        """–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"""
        if not text or not text.strip():
            return

        if self.is_speaking:
            self.stop()

        self.is_speaking = True
        print(f"üéØ TTS: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é '{text}'")

        def _process():
            try:
                if self.use_rvc and self.rvc_converter:
                    self._speak_with_rvc(text)
                else:
                    self._speak_direct(text)

            except Exception as e:
                print(f"‚ùå TTS Error: {e}")
                traceback.print_exc()
            finally:
                self.is_speaking = False
                print("‚úÖ TTS: –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

        self._current_thread = threading.Thread(target=_process, daemon=True)
        self._current_thread.start()

    def _speak_with_rvc(self, text):
        """–û–∑–≤—É—á–∫–∞ —Å RVC –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_input:
                temp_input_path = temp_input.name

            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_output:
                temp_output_path = temp_output.name

            # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ä–µ—á–∏
            print("üîä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∞–∑–æ–≤—É—é —Ä–µ—á—å...")
            self._generate_base_speech(text, temp_input_path)

            # –®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ RVC
            print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ RVC...")
            converted_path = self.rvc_converter.convert_audio(
                input_audio_path=temp_input_path,
                output_path=temp_output_path,
                f0_up_key=0
            )

            if converted_path and os.path.exists(converted_path):
                # –®–∞–≥ 3: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                print("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                self._play_audio(converted_path)
                print("üéâ RVC –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:
                print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –æ—Ä–∏–≥–∏–Ω–∞–ª")
                self._play_audio(temp_input_path)

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self._cleanup_files([temp_input_path, temp_output_path])

        except Exception as e:
            print(f"‚ùå RVC –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            self._speak_direct(text)

    def _speak_direct(self, text):
        """–ü—Ä—è–º–∞—è –æ–∑–≤—É—á–∫–∞ –±–µ–∑ RVC"""
        import pyttsx3

        engine = pyttsx3.init()
        engine.setProperty('rate', 180)
        engine.setProperty('volume', 1.0)

        voices = engine.getProperty('voices')
        if voices and len(voices) > self.voice_index:
            engine.setProperty('voice', voices[self.voice_index].id)

        engine.say(text)
        engine.runAndWait()

    def _generate_base_speech(self, text, output_path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ä–µ—á–∏ –¥–ª—è RVC"""
        import pyttsx3

        engine = pyttsx3.init()
        engine.setProperty('rate', 180)
        engine.setProperty('volume', 1.0)

        voices = engine.getProperty('voices')
        if voices and len(voices) > self.voice_index:
            engine.setProperty('voice', voices[self.voice_index].id)

        engine.save_to_file(text, output_path)
        engine.runAndWait()

    def _play_audio(self, audio_path):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        try:
            import pygame

            if not pygame.mixer.get_init():
                pygame.mixer.init()

            pygame.mixer.music.load(audio_path)
            pygame.mixer.music.play()

            while pygame.mixer.music.get_busy():
                threading.Event().wait(0.1)

        except ImportError:
            self._play_audio_system(audio_path)

    def _play_audio_system(self, audio_path):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–ª–µ–µ—Ä"""
        import subprocess
        import platform

        system = platform.system().lower()
        try:
            if system == 'windows':
                import winsound
                winsound.PlaySound(audio_path, winsound.SND_FILENAME)
            elif system == 'darwin':
                subprocess.run(['afplay', audio_path], check=True)
            else:
                subprocess.run(['aplay', audio_path], check=True)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")

    def _cleanup_files(self, file_paths):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        for file_path in file_paths:
            try:
                if os.path.exists(file_path):
                    os.unlink(file_path)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—á—å"""
        self.is_speaking = False
        print("‚èπÔ∏è TTS: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        try:
            import pygame
            pygame.mixer.music.stop()
        except:
            pass

TTSEngine = SimpleRVCTTSEngine