import threading
import queue
import asyncio
import traceback
import os
import tempfile
from playsound import playsound
import edge_tts

class TTSEngine:
    def __init__(self, voice="uk-UA-PolinaNeural"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —á–µ—Ä–≥—É —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –ø–æ—Ç—ñ–∫-–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –¥–ª—è edge-tts.
        """
        self.queue = queue.Queue()
        # –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—à—ñ –≥–æ–ª–æ—Å–∏ –∫–æ–º–∞–Ω–¥–æ—é: edge-tts --list-voices
        self.voice = voice

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫-–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫
        self.worker_thread = threading.Thread(target=self._process_queue, daemon=True)
        self.worker_thread.start()
        print(f"üîä TTS (edge-tts) worker started with voice: {self.voice}")

    def _process_queue(self):
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏.
        """
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç–æ–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é-–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
        try:
            loop.run_until_complete(self._async_worker())
        finally:
            loop.close()

    async def _async_worker(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –∑ —á–µ—Ä–≥–∏, —Å–∏–Ω—Ç–µ–∑—É—î –º–æ–≤—É —ñ –≤—ñ–¥—Ç–≤–æ—Ä—é—î —ó—ó.
        """
        while True:
            try:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ–∫–∞—î–º–æ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç –∑ —á–µ—Ä–≥–∏
                text = await asyncio.to_thread(self.queue.get)

                if text is None:
                    break

                print(f"üéØ TTS (edge-tts): Processing '{text}'")

                # –°–∏–Ω—Ç–µ–∑—É—î–º–æ –º–æ–≤—É
                communicate = edge_tts.Communicate(text, self.voice)

                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥—ñ–æ
                with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
                    tmp_filename = fp.name

                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—É–¥—ñ–æ —É —Ñ–∞–π–ª
                await communicate.save(tmp_filename)

                # –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫ (playsound - –±–ª–æ–∫—É—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
                try:
                    playsound(tmp_filename)
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É: {e}")
                finally:
                    # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                    os.remove(tmp_filename)

                print("‚úÖ TTS (edge-tts): Finished.")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ TTS –ø–æ—Ç–æ—Ü—ñ-–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É: {e}")
                traceback.print_exc()

    def speak(self, text):
        """
        –î–æ–¥–∞—î —Ç–µ–∫—Å—Ç —É —á–µ—Ä–≥—É –Ω–∞ –æ–∑–≤—É—á–µ–Ω–Ω—è.
        """
        if not text or not text.strip():
            return
        self.queue.put(text)

    def shutdown(self):
        """
        –ö–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É –ø–æ—Ç–æ–∫—É-–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞.
        """
        print("‚èπÔ∏è TTS: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        self.queue.put(None)
        self.worker_thread.join(timeout=2)
        print("TTS –ø–æ—Ç—ñ–∫-–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")